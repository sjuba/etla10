/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package etla.mod.etl.form;

import etla.mod.SModConsts;
import etla.mod.etl.db.SEtlConsts;
import etla.mod.etl.db.SEtlProcess;
import java.awt.Cursor;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import sa.lib.SLibConsts;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanFieldRadio;
import sa.lib.gui.bean.SBeanFormDialog;

/**
 *
 * @author Sergio Flores
 */
public class SDialogExport extends SBeanFormDialog implements ItemListener {

    /**
     * Creates new form SDialogExport
     */
    public SDialogExport(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.AX_ETL, SLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgMode = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        moRadModeCat = new sa.lib.gui.bean.SBeanFieldRadio();
        jPanel7 = new javax.swing.JPanel();
        moRadModeCatInv = new sa.lib.gui.bean.SBeanFieldRadio();
        jPanel3 = new javax.swing.JPanel();
        jlDatePeriodStart = new javax.swing.JLabel();
        moDatePeriodStart = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel4 = new javax.swing.JPanel();
        jlDatePeriodEnd = new javax.swing.JLabel();
        moDatePeriodEnd = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel5 = new javax.swing.JPanel();
        jlDateIssue = new javax.swing.JLabel();
        moDateIssue = new sa.lib.gui.bean.SBeanFieldDate();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Parámetros de exportación:"));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.GridLayout(5, 0, 0, 5));

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        bgMode.add(moRadModeCat);
        moRadModeCat.setText("Exportar catálogos");
        moRadModeCat.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel6.add(moRadModeCat);

        jPanel2.add(jPanel6);

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        bgMode.add(moRadModeCatInv);
        moRadModeCatInv.setText("Exportar catálogos y facturas");
        moRadModeCatInv.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel7.add(moRadModeCatInv);

        jPanel2.add(jPanel7);

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDatePeriodStart.setText("Fecha inicial:");
        jlDatePeriodStart.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel3.add(jlDatePeriodStart);
        jPanel3.add(moDatePeriodStart);

        jPanel2.add(jPanel3);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDatePeriodEnd.setText("Fecha final:");
        jlDatePeriodEnd.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jlDatePeriodEnd);
        jPanel4.add(moDatePeriodEnd);

        jPanel2.add(jPanel4);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateIssue.setText("Fecha emisión:");
        jlDateIssue.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel5.add(jlDateIssue);
        jPanel5.add(moDateIssue);

        jPanel2.add(jPanel5);

        jPanel1.add(jPanel2, java.awt.BorderLayout.NORTH);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgMode;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JLabel jlDateIssue;
    private javax.swing.JLabel jlDatePeriodEnd;
    private javax.swing.JLabel jlDatePeriodStart;
    private sa.lib.gui.bean.SBeanFieldDate moDateIssue;
    private sa.lib.gui.bean.SBeanFieldDate moDatePeriodEnd;
    private sa.lib.gui.bean.SBeanFieldDate moDatePeriodStart;
    private sa.lib.gui.bean.SBeanFieldRadio moRadModeCat;
    private sa.lib.gui.bean.SBeanFieldRadio moRadModeCatInv;
    // End of variables declaration//GEN-END:variables

    /*
     * Private methods
     */
    
    private void initComponentsCustom () {
        SGuiUtils.setWindowBounds(this, 480, 300);
        
        moRadModeCat.setBooleanSettings(SGuiUtils.getLabelName(moRadModeCat.getText()), false);
        moRadModeCatInv.setBooleanSettings(SGuiUtils.getLabelName(moRadModeCatInv.getText()), true);
        moDatePeriodStart.setDateSettings(miClient, SGuiUtils.getLabelName(jlDatePeriodStart), true);
        moDatePeriodEnd.setDateSettings(miClient, SGuiUtils.getLabelName(jlDatePeriodEnd), true);
        moDateIssue.setDateSettings(miClient, SGuiUtils.getLabelName(jlDateIssue), true);
        
        moFields.addField(moRadModeCat);
        moFields.addField(moRadModeCatInv);
        moFields.addField(moDatePeriodStart);
        moFields.addField(moDatePeriodEnd);
        moFields.addField(moDateIssue);
        moFields.setFormButton(jbSave);
        
        jbSave.setText(SGuiConsts.TXT_BTN_OK);
    }
    
    private void updateDateIssue(boolean enable) {
        if (enable) {
            moDateIssue.setEnabled(true);
            moDateIssue.setValue(miClient.getSession().getCurrentDate());
        }
        else {
            moDateIssue.setEnabled(false);
            moDateIssue.setValue(null);
        }
    }
    
    private void itemStateChangedModeCat() {
        updateDateIssue(false);
    }
    
    private void itemStateChangedModeCatInv() {
        updateDateIssue(true);
    }
    
    /*
     * Public methods
     */
    
    /*
     * Overriden methods
     */
    
    @Override
    public void addAllListeners() {
        moRadModeCat.addItemListener(this);
        moRadModeCatInv.addItemListener(this);
    }

    @Override
    public void removeAllListeners() {
        moRadModeCat.removeItemListener(this);
        moRadModeCatInv.removeItemListener(this);
    }

    @Override
    public void reloadCatalogues() {
        
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();
        
        return validation;
    }

    @Override
    public void initForm() {
        removeAllListeners();
        reloadCatalogues();
        
        moRadModeCatInv.setValue(true);
        moDatePeriodStart.setValue(miClient.getSession().getCurrentDate());
        moDatePeriodEnd.setValue(miClient.getSession().getCurrentDate());
        //moDateIssue.setValue(...);
        
        itemStateChangedModeCatInv();
        
        addAllListeners();
    }
    
    @Override
    public void actionSave() {
        if (jbSave.isEnabled()) {
            if (SGuiUtils.computeValidation(miClient, validateForm())) {
                try {
                    this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
                    
                    SEtlProcess.computeEtl(
                            miClient.getSession(), 
                            moRadModeCat.isSelected() ? SEtlConsts.ETL_MODE_CAT : SEtlConsts.ETL_MODE_CAT_INV, 
                            moDatePeriodStart.getValue(), 
                            moDatePeriodEnd.getValue(), 
                            moDateIssue.getValue());
                    
                    miClient.showMsgBoxInformation(SLibConsts.MSG_PROCESS_FINISHED);
                    
                    mnFormResult = SGuiConsts.FORM_RESULT_OK;
                    dispose();
                }
                catch (Exception e) {
                    SLibUtils.showException(this, e);
                }
                finally {
                    this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                }
            }
        }
    }
    
    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof SBeanFieldRadio) {
            if (e.getStateChange() == ItemEvent.SELECTED) {
                SBeanFieldRadio field = (SBeanFieldRadio) e.getSource();

                if (field == moRadModeCat) {
                    itemStateChangedModeCat();
                }
                else if (field == moRadModeCatInv) {
                    itemStateChangedModeCatInv();
                }
            }
        }
    }
}
