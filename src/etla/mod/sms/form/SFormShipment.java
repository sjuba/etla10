/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package etla.mod.sms.form;

import etla.mod.SModConsts;
import etla.mod.SModSysConsts;
import etla.mod.sms.db.SDbShipment;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JButton;
import sa.lib.SLibConsts;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanForm;

/**
 *
 * @author Daniel López
 */
public class SFormShipment extends SBeanForm implements ActionListener{

    private SDbShipment moRegistry;
    /**
     * Creates new form SFormShipmentOrder
     * @param client
     * @param title
     */
    public SFormShipment(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.S_SHIPT, SLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpHeader = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jlNumber = new javax.swing.JLabel();
        jtfNumber = new javax.swing.JTextField();
        jPanel8 = new javax.swing.JPanel();
        jlDate = new javax.swing.JLabel();
        moDateDate = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel9 = new javax.swing.JPanel();
        jlShipmentType = new javax.swing.JLabel();
        moKeyShipmentType = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel10 = new javax.swing.JPanel();
        jlCargoType = new javax.swing.JLabel();
        moKeyCargoType = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel11 = new javax.swing.JPanel();
        jlHandlingType = new javax.swing.JLabel();
        moKeyHandlingType = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel6 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jlShipper = new javax.swing.JLabel();
        moKeyShipper = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel16 = new javax.swing.JPanel();
        jlVehicleType = new javax.swing.JLabel();
        moKeyVehicleType = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel17 = new javax.swing.JPanel();
        jlVehiclePlate = new javax.swing.JLabel();
        moTextVehiclePlate = new sa.lib.gui.bean.SBeanFieldText();
        jPanel14 = new javax.swing.JPanel();
        jlDriverName = new javax.swing.JLabel();
        moTextDriverName = new sa.lib.gui.bean.SBeanFieldText();
        jPanel15 = new javax.swing.JPanel();
        jlDriverPhone = new javax.swing.JLabel();
        moTextDriverPhone = new sa.lib.gui.bean.SBeanFieldText();
        jpBody = new javax.swing.JPanel();
        jpRows = new javax.swing.JPanel();
        jpFilters = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        moDateRows = new sa.lib.gui.bean.SBeanFieldDate();
        jpAvailableRows = new javax.swing.JPanel();
        jpSelectedRows = new javax.swing.JPanel();
        jlTotalAvailables1 = new javax.swing.JLabel();
        jpControlButtons = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jlDummy01 = new javax.swing.JLabel();
        jbRowAdd = new javax.swing.JButton();
        jbRowRemove = new javax.swing.JButton();
        jpFooter = new javax.swing.JPanel();
        jPanel20 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        moKeyComment = new sa.lib.gui.bean.SBeanFieldKey();
        jbAddComment = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jspComments = new javax.swing.JScrollPane();
        jtaComments = new javax.swing.JTextArea();
        jPanel21 = new javax.swing.JPanel();
        jPanel22 = new javax.swing.JPanel();
        jPanel23 = new javax.swing.JPanel();
        jlTotalM2 = new javax.swing.JLabel();
        jtfTotalM2 = new javax.swing.JTextField();
        jPanel24 = new javax.swing.JPanel();
        jlEstatus = new javax.swing.JLabel();
        jtfEstatus = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jlReleaseOnSave = new javax.swing.JLabel();
        jchReleaseOnSave = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jpHeader.setLayout(new java.awt.GridLayout(1, 2));

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel5.setLayout(new java.awt.GridLayout(5, 1, 0, 5));

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlNumber.setText("Folio:");
        jlNumber.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel7.add(jlNumber);

        jtfNumber.setEditable(false);
        jtfNumber.setText("0");
        jtfNumber.setFocusable(false);
        jtfNumber.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel7.add(jtfNumber);

        jPanel5.add(jPanel7);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDate.setText("Fecha:*");
        jlDate.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel8.add(jlDate);
        jPanel8.add(moDateDate);

        jPanel5.add(jPanel8);

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlShipmentType.setText("Tipo embarque:*");
        jlShipmentType.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel9.add(jlShipmentType);

        moKeyShipmentType.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel9.add(moKeyShipmentType);

        jPanel5.add(jPanel9);

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCargoType.setText("Tipo carga:*");
        jlCargoType.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel10.add(jlCargoType);

        moKeyCargoType.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel10.add(moKeyCargoType);

        jPanel5.add(jPanel10);

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlHandlingType.setText("Tipo maniobra:*");
        jlHandlingType.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel11.add(jlHandlingType);

        moKeyHandlingType.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel11.add(moKeyHandlingType);

        jPanel5.add(jPanel11);

        jpHeader.add(jPanel5);

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del transportista:"));
        jPanel6.setLayout(new java.awt.GridLayout(5, 1, 0, 5));

        jPanel13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlShipper.setText("Transportista:*");
        jlShipper.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel13.add(jlShipper);

        moKeyShipper.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel13.add(moKeyShipper);

        jPanel6.add(jPanel13);

        jPanel16.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlVehicleType.setText("Tipo vehículo:*");
        jlVehicleType.setPreferredSize(new java.awt.Dimension(100, 23));
        jlVehicleType.setRequestFocusEnabled(false);
        jPanel16.add(jlVehicleType);

        moKeyVehicleType.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel16.add(moKeyVehicleType);

        jPanel6.add(jPanel16);

        jPanel17.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlVehiclePlate.setText("Placas vehículo:*");
        jlVehiclePlate.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel17.add(jlVehiclePlate);

        moTextVehiclePlate.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel17.add(moTextVehiclePlate);

        jPanel6.add(jPanel17);

        jPanel14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDriverName.setText("Nombre chofer:*");
        jlDriverName.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel14.add(jlDriverName);

        moTextDriverName.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel14.add(moTextDriverName);

        jPanel6.add(jPanel14);

        jPanel15.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDriverPhone.setText("Teléfono chofer:*");
        jlDriverPhone.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel15.add(jlDriverPhone);

        moTextDriverPhone.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel15.add(moTextDriverPhone);

        jPanel6.add(jPanel15);

        jpHeader.add(jPanel6);

        getContentPane().add(jpHeader, java.awt.BorderLayout.NORTH);

        jpBody.setLayout(new java.awt.BorderLayout());

        jpRows.setBorder(javax.swing.BorderFactory.createTitledBorder("Remisiones:"));
        jpRows.setLayout(new java.awt.BorderLayout(5, 5));

        jpFilters.setLayout(new java.awt.GridLayout(1, 1, 0, 5));

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));
        jPanel4.add(moDateRows);

        jpFilters.add(jPanel4);

        jpRows.add(jpFilters, java.awt.BorderLayout.NORTH);

        jpAvailableRows.setBorder(javax.swing.BorderFactory.createTitledBorder("Disponibles:"));
        jpAvailableRows.setPreferredSize(new java.awt.Dimension(450, 100));
        jpAvailableRows.setLayout(new java.awt.BorderLayout());
        jpRows.add(jpAvailableRows, java.awt.BorderLayout.LINE_START);

        jpSelectedRows.setBorder(javax.swing.BorderFactory.createTitledBorder("Seleccionadas:"));
        jpSelectedRows.setPreferredSize(new java.awt.Dimension(450, 100));
        jpSelectedRows.setLayout(new java.awt.BorderLayout());

        jlTotalAvailables1.setText("n");
        jpSelectedRows.add(jlTotalAvailables1, java.awt.BorderLayout.SOUTH);

        jpRows.add(jpSelectedRows, java.awt.BorderLayout.LINE_END);

        jpControlButtons.setLayout(new java.awt.BorderLayout());

        jPanel12.setLayout(new java.awt.GridLayout(4, 1, 0, 5));
        jPanel12.add(jlDummy01);

        jbRowAdd.setText(">");
        jbRowAdd.setToolTipText("Agregar");
        jbRowAdd.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel12.add(jbRowAdd);

        jbRowRemove.setText("<");
        jbRowRemove.setToolTipText("Remover");
        jbRowRemove.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel12.add(jbRowRemove);

        jpControlButtons.add(jPanel12, java.awt.BorderLayout.PAGE_START);

        jpRows.add(jpControlButtons, java.awt.BorderLayout.CENTER);

        jpBody.add(jpRows, java.awt.BorderLayout.CENTER);

        jpFooter.setLayout(new java.awt.GridLayout(1, 2));

        jPanel20.setBorder(javax.swing.BorderFactory.createTitledBorder("Observaciones:"));
        jPanel20.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        moKeyComment.setToolTipText("Comentario");
        moKeyComment.setPreferredSize(new java.awt.Dimension(350, 23));
        jPanel1.add(moKeyComment);

        jbAddComment.setText("+");
        jbAddComment.setToolTipText("Agregar comentario");
        jbAddComment.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jbAddComment.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel1.add(jbAddComment);

        jPanel20.add(jPanel1, java.awt.BorderLayout.NORTH);

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jspComments.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jspComments.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jspComments.setPreferredSize(new java.awt.Dimension(378, 75));
        jspComments.setRequestFocusEnabled(false);

        jtaComments.setColumns(20);
        jtaComments.setFont(new java.awt.Font("Monospaced", 0, 11)); // NOI18N
        jtaComments.setRows(5);
        jspComments.setViewportView(jtaComments);

        jPanel2.add(jspComments);

        jPanel20.add(jPanel2, java.awt.BorderLayout.CENTER);

        jpFooter.add(jPanel20);

        jPanel21.setBorder(javax.swing.BorderFactory.createTitledBorder("Totales:"));
        jPanel21.setLayout(new java.awt.BorderLayout());

        jPanel22.setLayout(new java.awt.GridLayout(3, 1, 0, 5));

        jPanel23.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 5, 0));

        jlTotalM2.setText("Total de m²:");
        jlTotalM2.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel23.add(jlTotalM2);

        jtfTotalM2.setEditable(false);
        jtfTotalM2.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfTotalM2.setText("0");
        jtfTotalM2.setFocusable(false);
        jtfTotalM2.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel23.add(jtfTotalM2);

        jPanel22.add(jPanel23);

        jPanel24.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 5, 0));

        jlEstatus.setText("Estatus embarque:");
        jlEstatus.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel24.add(jlEstatus);

        jtfEstatus.setEditable(false);
        jtfEstatus.setFocusable(false);
        jtfEstatus.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel24.add(jtfEstatus);

        jPanel22.add(jPanel24);

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 5, 0));

        jlReleaseOnSave.setText("Liberar al guardar");
        jlReleaseOnSave.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel3.add(jlReleaseOnSave);

        jchReleaseOnSave.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel3.add(jchReleaseOnSave);

        jPanel22.add(jPanel3);

        jPanel21.add(jPanel22, java.awt.BorderLayout.NORTH);

        jpFooter.add(jPanel21);

        jpBody.add(jpFooter, java.awt.BorderLayout.SOUTH);

        getContentPane().add(jpBody, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbAddComment;
    private javax.swing.JButton jbRowAdd;
    private javax.swing.JButton jbRowRemove;
    private javax.swing.JCheckBox jchReleaseOnSave;
    private javax.swing.JLabel jlCargoType;
    private javax.swing.JLabel jlDate;
    private javax.swing.JLabel jlDriverName;
    private javax.swing.JLabel jlDriverPhone;
    private javax.swing.JLabel jlDummy01;
    private javax.swing.JLabel jlEstatus;
    private javax.swing.JLabel jlHandlingType;
    private javax.swing.JLabel jlNumber;
    private javax.swing.JLabel jlReleaseOnSave;
    private javax.swing.JLabel jlShipmentType;
    private javax.swing.JLabel jlShipper;
    private javax.swing.JLabel jlTotalAvailables1;
    private javax.swing.JLabel jlTotalM2;
    private javax.swing.JLabel jlVehiclePlate;
    private javax.swing.JLabel jlVehicleType;
    private javax.swing.JPanel jpAvailableRows;
    private javax.swing.JPanel jpBody;
    private javax.swing.JPanel jpControlButtons;
    private javax.swing.JPanel jpFilters;
    private javax.swing.JPanel jpFooter;
    private javax.swing.JPanel jpHeader;
    private javax.swing.JPanel jpRows;
    private javax.swing.JPanel jpSelectedRows;
    private javax.swing.JScrollPane jspComments;
    private javax.swing.JTextArea jtaComments;
    private javax.swing.JTextField jtfEstatus;
    private javax.swing.JTextField jtfNumber;
    private javax.swing.JTextField jtfTotalM2;
    private sa.lib.gui.bean.SBeanFieldDate moDateDate;
    private sa.lib.gui.bean.SBeanFieldDate moDateRows;
    private sa.lib.gui.bean.SBeanFieldKey moKeyCargoType;
    private sa.lib.gui.bean.SBeanFieldKey moKeyComment;
    private sa.lib.gui.bean.SBeanFieldKey moKeyHandlingType;
    private sa.lib.gui.bean.SBeanFieldKey moKeyShipmentType;
    private sa.lib.gui.bean.SBeanFieldKey moKeyShipper;
    private sa.lib.gui.bean.SBeanFieldKey moKeyVehicleType;
    private sa.lib.gui.bean.SBeanFieldText moTextDriverName;
    private sa.lib.gui.bean.SBeanFieldText moTextDriverPhone;
    private sa.lib.gui.bean.SBeanFieldText moTextVehiclePlate;
    // End of variables declaration//GEN-END:variables

    /* 
    *Private methods
    */
    
    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 1024, 590);
        
        moDateDate.setDateSettings(miClient, SGuiUtils.getLabelName(jlDate), true);
        moKeyShipmentType.setKeySettings(miClient, SGuiUtils.getLabelName(jlShipmentType), true);
        moKeyCargoType.setKeySettings(miClient, SGuiUtils.getLabelName(jlCargoType), true);
        moKeyHandlingType.setKeySettings(miClient, SGuiUtils.getLabelName(jlHandlingType), true);
        moKeyShipper.setKeySettings(miClient, SGuiUtils.getLabelName(jlShipper), true);
        moKeyVehicleType.setKeySettings(miClient, SGuiUtils.getLabelName(jlVehicleType), true);
        moTextVehiclePlate.setTextSettings(SGuiUtils.getLabelName(jlVehiclePlate), 25);
        moTextDriverName.setTextSettings(SGuiUtils.getLabelName(jlDriverName), 50);
        moTextDriverPhone.setTextSettings(SGuiUtils.getLabelName(jlDriverPhone), 50);
        moKeyComment.setKeySettings(miClient, SGuiUtils.getLabelName(moKeyComment.getToolTipText()), false);
        
        moFields.addField(moDateDate);
        moFields.addField(moKeyShipmentType);
        moFields.addField(moKeyCargoType);
        moFields.addField(moKeyHandlingType);
        moFields.addField(moKeyShipper);
        moFields.addField(moKeyVehicleType);
        moFields.addField(moTextVehiclePlate);
        moFields.addField(moTextDriverName);
        moFields.addField(moTextDriverPhone);
        moFields.addField(moKeyComment);
        
        moFields.setFormButton(jbSave);
        
    }
    
    private void computeTotalM2() {
        double totalM2 = 0;
        
        jtfTotalM2.setText(SLibUtils.getDecimalFormatQuantity().format(totalM2));
        jtfTotalM2.setCaretPosition(0);
    }
    
    private void actionPerformedAddComment() {
        if(moKeyComment.getSelectedIndex() > 0) {
            if(jtaComments.getText().isEmpty()) {
                jtaComments.setText(moKeyComment.getSelectedItem().getItem());
            }
            else {
                jtaComments.append("\n" + moKeyComment.getSelectedItem().getItem());
            }
        }
    }
    
    private void disableSaveButton() {
        if(moRegistry.getFkShipmentStatusId() == SModSysConsts.SS_SHIPT_ST_REL) {   //If shipment it's already released
            jbSave.setEnabled(false);
        }
    }
    
    /*
     * Public methods
     */
    
    /*
     * Overriden methods
     */
    
    @Override
    public void addAllListeners() {
        jbAddComment.addActionListener(this);
    }

    @Override
    public void removeAllListeners() {
        jbAddComment.removeActionListener(this);
    }

    @Override
    public void reloadCatalogues() {
        miClient.getSession().populateCatalogue(moKeyShipmentType, SModConsts.SU_SHIPT_TP, SLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyCargoType, SModConsts.SU_CARGO_TP, SLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyHandlingType, SModConsts.SU_HANDG_TP, SLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyShipper, SModConsts.SU_SHIPPER, SLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyVehicleType, SModConsts.SU_VEHIC_TP, SLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyComment, SModConsts.SU_COMMENT, SLibConsts.UNDEFINED, null);
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        moRegistry = (SDbShipment) registry;
        
        mnFormResult = SLibConsts.UNDEFINED;
        mbFirstActivation = true;

        removeAllListeners();
        reloadCatalogues();
        
        if (moRegistry.isRegistryNew()) {
            moRegistry.setShiptmentDate(miClient.getSession().getCurrentDate());
            jtfRegistryKey.setText("");
        }
        else {
            jtfEstatus.setText(miClient.getSession().readField(SModConsts.SS_SHIPT_ST, new int[] {moRegistry.getFkShipmentStatusId()} , SDbRegistry.FIELD_NAME).toString());
            jtfEstatus.setCaretPosition(0);
            jtfRegistryKey.setText(SLibUtils.textKey(moRegistry.getPrimaryKey()));
        }
        
        jtfNumber.setText("" + moRegistry.getNumber());
        moDateDate.setValue(moRegistry.getShiptmentDate());
        moKeyShipmentType.setValue(new int[] { moRegistry.getFkShipmentTypeId()} );
        moKeyCargoType.setValue(new int[]{ moRegistry.getFkCargoTypeId() });
        moKeyHandlingType.setValue(new int[] { moRegistry.getFkHandlingTypeId() });
        moKeyShipper.setValue(new int[] { moRegistry.getFkShipperId() });
        moKeyVehicleType.setValue(new int[] { moRegistry.getFkVehicleTypeId() });
        moTextVehiclePlate.setValue(moRegistry.getVehiclePlate());
        moTextDriverName.setValue(moRegistry.getDriverName());
        moTextDriverPhone.setValue(moRegistry.getDriverPhone());
        jtaComments.setText(moRegistry.getComments());
        
        computeTotalM2();
        
        setFormEditable(true);
        disableSaveButton();
        
        if (moRegistry.isRegistryNew()) {
        }
        else {
        }
        
        addAllListeners();
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        SDbShipment registry = moRegistry.clone();

        if (registry.isRegistryNew()) {}

        //registry.setNumber(...);
        registry.setShiptmentDate(moDateDate.getValue());
        registry.setDriverName(moTextDriverName.getText());
        registry.setDriverPhone(moTextDriverPhone.getText());
        registry.setVehiclePlate(moTextVehiclePlate.getText());
        //registry.setWebKey(...);
        //registry.setTotalM2(...);
        registry.setComments(jtaComments.getText());
        //registry.setAnnulled(...);
        //registry.setDeleted(...);
        //registry.setSystem(...);
        registry.setFkShipmentStatusId(jchReleaseOnSave.isSelected() ? SModSysConsts.SS_SHIPT_ST_REL : SModSysConsts.SS_SHIPT_ST_REL_TO);
        registry.setFkShipmentTypeId(moKeyShipmentType.getValue()[0]);
        registry.setFkCargoTypeId(moKeyCargoType.getValue()[0]);
        registry.setFkHandlingTypeId(moKeyHandlingType.getValue()[0]);
        registry.setFkVehicleTypeId(moKeyVehicleType.getValue()[0]);
        registry.setFkShipperId(moKeyShipper.getValue()[0]);

        return registry;
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();
        
        return validation;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();
            
            if (button == jbAddComment) {
                actionPerformedAddComment();
            }
        }
    }
}
